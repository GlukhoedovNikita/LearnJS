// 1.
// Напишите функцию sumTo(n), которая вычисляет сумму чисел 1 + 2 + ... + n.

const sumTo = (n) => {
    if (n !== 1) {
        return n + sumTo(n - 1)
    } else {
        return n
    }
}

console.log(sumTo(10))
console.log(sumTo(2))

// 2.
// Факториал натурального числа – это число, умноженное на "себя минус один", затем на "себя минус два", и так далее до 1. Факториал n обозначается как n!

const factorials = (n) => {
    if (n !== 1) {
        return n * factorials(n - 1)
    } else {
        return n
    }
}

console.log(factorials(5))
console.log(factorials(3))

// 3.
// Последовательность чисел Фибоначчи определяется формулой Fn = Fn-1 + Fn-2. То есть, следующее число получается как сумма двух предыдущих.
// Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....
// Числа Фибоначчи тесно связаны с золотым сечением и множеством природных явлений вокруг нас.
// Напишите функцию fib(n) которая возвращает n-е число Фибоначчи.

const fib = (n) => {
    if (n > 2) {
        return fib(n - 1) + fib(n - 2)
    } else {
        return 1
    }
}

console.log(fib(5))
console.log(fib(3))
console.log(fib(13))

// 4.
// Допустим, у нас есть односвязный список (как описано в главе Рекурсия и стек):
// Напишите функцию printList(list), которая выводит элементы списка по одному.

const list = {
    value: 1,
    next: {
      value: 2,
      next: {
        value: 3,
        next: {
          value: 4,
          next: null
        }
      }
    }
};

const printList = (list) => {
    if (list?.next) {
        console.log(list.value)
        return printList(list.next)
    } else {
        console.log(list.value)
        return
    }
}

printList(list)

// Пару слов при рекурсию. С помощью рекурсии можно достаточно легко решать многие задачи если ее понять, но она
// сильно проигрывает алгоритмам с помощью циклов по памяти, потому что пока все вложенные функции не завершат свою
// работу сборщик мусора не очистит их лексическую область, а это большой удар по памяти.

// В кратце юзаем если неважна памяти (производительность).