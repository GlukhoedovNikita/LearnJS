// 1.
// Что выведет функция?

function f() {
    console.log(this)
}

const user = {
    g: f.bind(null)
}

user.g() // null 

// Функция выведет null потому что с помощью bind мы привязали к ней этот контекст

// 2.
// Можем ли мы изменить this дополнительным связыванием?
// Что выведет этот код?

function f1 () {
    console.log(this)
}

f1.bind({name: 'Вася'})() // {name: Вася}
f1.bind({name: 'Петя'})() // {name: Петя}

f1.bind({name: 'Вася'}).bind({name: 'Петя'})() // {name: Вася}

// Мы не может использовать bind один за другим
// Сработает только первый bind последующие не на что влиять не будут

// 3.
// В свойство функции записано значение. Изменится ли оно после применения bind? Обоснуйте ответ.

function sayHi() {
    console.log(this.name)
}
sayHi.test = 5

const bound = sayHi.bind({name: 'Петя'})
bound() // {name: 'Петя}

console.log(bound.test) // undefined

// Собственные свойства которые мы задали функции никак не связанны с контекстом, bind просто привязывает к функции контекст
// Поэтому bound.test - просто несуществует

// Основное что нужно запомнить про bind - этот метод ПРИВЯЗЫВАЕТ контекст к функции, это его основное отличие от 
// call, apply - они вызывают функцию с определенны контекстом, но не привязывают его